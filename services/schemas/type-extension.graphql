type Question {
    ID: Int!
    UUID: String!
    testID: Int!
    text: String!
    imgURL: String
    rightAnswer: Int!
    answers: [Answer!]!
}

type Test {
    ID: Int!
    UUID: String!
    name: String!
    questions: [Question!]
}

type Answer {
    ID: Int!
    text: String!
    sequential: Int!
    imgURL: String
}


#Game
type Game {
    test: Test!
    CODE: String!
    Status: Int!
    players: [Player!]
}

type Player {
    UUID: String!
    game: Game!
    name: String!
}

type Status {
    success: Boolean!
}

type ChatMessage {
    UUID: String!
    message: String!
    player: Player!
    game: Game!
    time: String!
}


type BroadcastPlayingGame  {
    currentTimeSec: Int!
    gameCode:  String!
    startTimeSec:  Int!
    currentQuestionUUID: String!
    gameStatusEnum: GameStatus!
    answers: [BroadcastAnswerForChartGame!]!
}

type BroadcastAnswerForChartGame{
    answerID: Int!
    players:[BroadcastPlayersForChartGame!]!
}

type BroadcastPlayersForChartGame{
    player: BroadcastPlayer!
    wasRight: Boolean!
}

type BroadcasChatGame  {
    UUID: String!
    message: String!
    player:  BroadcastPlayer!
    time:  String!
}

#Broadcast
type BroadcastPlayer  {
    UUID: String!
    gameCode:  String!
    name: String!
}

type StartGame  {
    gameCode:  String!
}
#report game

type ReportGame {
    code: String!
    players: [ReportPlayer!]!
}

type ReportPlayer {
    player: Player!
    answers: [ReportAnswer!]!
}

type ReportAnswer {
    answer: Answer!
    right: Boolean!
}